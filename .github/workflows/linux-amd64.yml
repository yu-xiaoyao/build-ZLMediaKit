name: Linux-amd64

on:
  push:
    branches: [ "main" ]
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-20.04
    # runs-on: ubuntu-latest

    steps:

    - name: 下载 ZLMediaKit
      uses: actions/checkout@v4
      with:
        repository: ZLMediaKit/ZLMediaKit
        fetch-depth: 1
        ref: master
        path: .

    - name: 下载submodule源码
      run: mv -f .gitmodules_github .gitmodules && git submodule sync && git submodule update --init

    - name: Download openssl
      uses: actions/checkout@v4
      with:
        repository: openssl/openssl
        fetch-depth: 1
        ref: OpenSSL_1_1_1
        path: 3rdpart/openssl

    - name: 下载 usrsctp
      uses: actions/checkout@v2
      with:
        repository: sctplab/usrsctp
        fetch-depth: 1
        ref: 0.9.5.0
        path: 3rdpart/usrsctp        

    - name: 下载 SRTP
      uses: actions/checkout@v4
      with:
        repository: cisco/libsrtp
        fetch-depth: 1
        ref: v2.3.0
        path: 3rdpart/libsrtp


    - name: apt update install must dep
      run: sudo apt-get update && sudo apt-get install -y build-essential
    - name: get cmake version
      run: cmake --version

    - name: apt-get安装依赖库(非必选)
      run: sudo apt-get install -y libavcodec-dev libavutil-dev libswscale-dev libresample-dev

    # - name: apt-get sdl
    #   continue-on-error: true
    #   run: sudo apt-get install -y libsdl-dev

    - name: apt-get sdl 1.2
      continue-on-error: true
      run: sudo apt-get install -y libsdl1.2-dev

    - name: build opensll OpenSSL_1_1_1
      run: |
        sudo mkdir -p /usr/openssl-1.1.1w
        cd 3rdpart/openssl
        ./config no-shared --prefix=/usr/openssl-1.1.1w
        make -j $(nproc)
        sudo make install
        cd ../../

    # - name: install old cmake
    #   run: |
    #     wget https://github.com/Kitware/CMake/releases/download/v3.29.5/cmake-3.29.5.tar.gz
    #     tar -xf cmake-3.29.5.tar.gz
    #     cd cmake-3.29.5
    #     OPENSSL_ROOT_DIR=/usr/openssl-1.1.1w ./configure
    #     make -j $(nproc)
    #     sudo make install
    #     cd ..
    #     cmake --version

    - name: 编译 usrsctp
      run: |
        cd 3rdpart/usrsctp
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON ..
        make -j $(nproc)
        sudo make install
        cd ../../../
    
    - name: 编译 SRTP
      run: |
        cd 3rdpart/libsrtp
        ./configure --enable-openssl --with-openssl-dir=/usr/openssl-1.1.1w
        make -j $(nproc)
        sudo make install
        cd ../../

    - name: 编译 ZLMediaKit
      run: mkdir -p linux_build && cd linux_build && cmake .. -DOPENSSL_ROOT_DIR=/usr/openssl-1.1.1w -DENABLE_WEBRTC=true -DENABLE_FFMPEG=true && make -j $(nproc)
      # run: mkdir -p linux_build && cd linux_build && cmake .. -DOPENSSL_ROOT_DIR=/usr/openssl-1.1.1w -DCMAKE_BUILD_TYPE=Release && make -j $(nproc)

    - name: Create ZIP Dir
      if: startsWith(github.ref, 'refs/tags/')
      run: mkdir ZLMediaKit-linux

    - name: Copy Need Files
      if: startsWith(github.ref, 'refs/tags/')
      run: |
          cp -r "release/linux/Debug/" "ZLMediaKit-linux/"
          cp -r "api/include/" "ZLMediaKit-linux/"
      
    - name: Package Files
      if: startsWith(github.ref, 'refs/tags/')
      run: tar -cvf ZLMediaKit-linux_amd64.tar ZLMediaKit-linux/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: ZLMediaKit-linux_amd64
        path: ZLMediaKit-linux_amd64.tar

    - name: Release artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ZLMediaKit-linux_amd64.tar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
